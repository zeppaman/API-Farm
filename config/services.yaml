# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        public: true
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    MongoDB\Client:
        public: true
        autowire: true
        arguments: [ 'mongodb://mongo/test?retryWrites=true&w=majority']
    
    App\Services\ICrudService: '@App\Services\CrudService'

    App\EventListener\UserResolveListener:
        public: true
        tags:
            - { name: kernel.event_listener, event: trikoder.oauth2.user_resolve, method: onUserResolve }

    Trikoder\Bundle\OAuth2Bundle\Manager\ClientManagerInterface: '@App\Security\ClientManager'

    Trikoder\Bundle\OAuth2Bundle\Manager\AccessTokenManagerInterface: '@App\Security\AccessTokenManager'
    
    Symfony\Component\Security\Core\User\UserProviderInterface: '@App\Security\UserProvider'

    App\Entity\Fields\IntFieldType:
        tags: ['app.fieldtype']

    App\Entity\Fields\TextFieldType:
        tags: ['app.fieldtype']

    App\Services\TypeService:
        arguments:
            - !tagged app.fieldtype